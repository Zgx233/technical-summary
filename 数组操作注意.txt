不要用 for_in 遍历数组
1.遍历顺序不固定
2.会遍历出对象原型链上的值
3.运行效率低下


不要用 JSON.parse(JSON.stringify()) 深拷贝数组

1.会使某些特定值转换为 null
    NaN, undefined, Infinity 对于 JSON 中不支持的这些值，会在序列化 JSON 时被转换为 null，反序列化回来后
    自然也就是 null

2.会丢失值为 undefined 的键值对
    JSON 序列化时会忽略值为 undefined 的 key，反序列化回来后自然也就丢失了

3.会将 Date 对象转换为字符串
    JSON 不支持对象类型，对于 JS 中 Date 对象的处理方式为转换为 ISO8601 格式的字符串。然而反序列化并不会
    把时间格式的字符串转化为 Date 对象

4.运行效率低下
    作为原生函数， JSON.stringify 和 JSON.parse 自身操作 JSON 字符串的速度是很快的。然而为了深拷贝数组把
    对象序列化成 JSON 再反序列化回来完全没有必要。

我花了一些时间写了一个简单的深拷贝数组或对象的函数，测试发现运行速度差不多是使用 JSON 中转的 6 倍左右，顺便还支持了 TypedArray、RegExp 的对象的复制
    
    
forEach 与 break

    ES6 以前，遍历数组主要就是两种方法：手写循环用下标迭代，使用 Array.prototype.forEach。
    前者万能，效率最高，可就是写起来比较繁琐——它不能直接获取到数组中的值。

    笔者个人是喜欢后者的：可以直接获取到迭代的下标和值，而且函数式风格（注意 FP 注重的是不可变数据结构，
    forEach 天生为副作用存在，所以只有 FP 的形而没有神）写起来爽快无比。但是！不知各位同学注意过没有：
    forEach 一旦开始就停不下来了。。。

    forEach 接受一个回调函数，你可以提前 return，相当于手写循环中的 continue。
    但是你不能 break——因为回调函数中没有循环让你去 break：
        [1, 2, 3, 4, 5].forEach(x => {
            console.log(x);
            if(x === 3) {
                break; // SyntaxError: Illegal break statement
            }
        });
    解决方案还是有的。其他函数式编程语言例如 scala 就遇到了类似问题，它提供了一个函数：break，
    作用是抛出一个异常。
    
    我们可以仿照这样的做法，来实现 arr.forEach 的 break：
        try {
            [1, 2, 3, 4, 5].forEach(x => {
                console.log(x);
                if(x === 3) {
                    break; // SyntaxError: Illegal break statement
                }
            });
        } catch (e) {
            if (e !== 'break') throw e; // 不要勿吞异常
        }
